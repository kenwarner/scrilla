@model scrilla.Web.Controllers.ViewModels.TransactionsViewModel

@{
  int? urlAccountId = Model.Account == null ? (int?)null : Model.Account.Id;
  string urlVendorId = Model.Vendor == null ? null : (Model.Vendor.Id == 0 ? "none" : Model.Vendor.Id.ToString());
  string urlCategoryId = Model.Category == null ? null : (Model.Category.Id == 0 ? "none" : Model.Category.Id.ToString());
  string urlFrom = Model.UrlFrom.HasValue ? Model.UrlFrom.Value.ToUrlDate() : null;
  string urlTo = Model.UrlTo.HasValue ? Model.UrlTo.Value.ToUrlDate() : null;

  string pageTitle;
  if (Model.FromMonth == Model.ToMonth)
  {
    pageTitle = "Transactions for " + Model.From.ToString("MMMM yyyy");
  }
  else if (Model.FromMonth.Month == 1 && Model.ToMonth.Month == 12 && Model.ToMonth.Year == Model.FromMonth.Year)
  {
    pageTitle = "Transactions for " + Model.From.ToString("yyyy");
  }
  else
  {
    pageTitle = "Transactions from " + Model.From.ToString("MMMM yyyy") + " to " + Model.To.ToString("MMMM yyyy");
  }

  var titleAccount = Model.Account != null ? "Account: " + Model.Account.Name : "";
  var titleCategory = Model.Category != null ? "Category: " + Model.Category.Name : "";
  var titleVendor = Model.Vendor != null ? "Vendor: " + Model.Vendor.Name : "";
  ViewBag.Title = pageTitle +
    (!String.IsNullOrEmpty(titleAccount) ? " | " + titleAccount : "") + 
    (!String.IsNullOrEmpty(titleCategory) ? " | " + titleCategory : "") +
    (!String.IsNullOrEmpty(titleVendor) ? " | " + titleVendor : "");
}

<script type="text/javascript">
  @Html.Raw("var monthNavUrl = 'Transactions';")
  @if(urlAccountId.HasValue) { 
    @Html.Raw(String.Format("var urlAccountId = '{0}';", urlAccountId.Value));
  }
  @if(Model.Vendor != null) { 
    @Html.Raw(String.Format("var urlVendorId = '{0}';", urlVendorId));
  }
  @if(Model.Category != null) { 
    @Html.Raw(String.Format("var urlCategoryId = '{0}';", urlCategoryId));
  }

  var categories = @Model.AvailableCategories.ToJson();
  var categoryMarkup = '<option value="${Id}"${Selected}>${Name}</option>';
  $.template("categoryTemplate", categoryMarkup);

  var vendors = @Model.AvailableVendors.ToJson();
  var vendorMarkup = '<option value="${Id}"${Selected}>${Name}</option>';
  $.template("vendorTemplate", vendorMarkup);
</script>

<h2>@pageTitle</h2>
@if (!ViewContext.IsChildAction)
{
  if (urlAccountId.HasValue)
  {
    <h2>Account: @Html.ActionLink(Model.Account.Name, MVC.Account.Transactions(accountId: urlAccountId.Value)) @Html.ActionLink("×", MVC.Account.Transactions(null, urlVendorId, urlCategoryId, urlFrom, urlTo), new { @class = "filter", title = "Remove this filter" })</h2>
  }
  if (Model.Category != null)
  {
    <h2>Category: 
    @if (Model.Category != null && Model.Category.Id != 0)
    {
      @Html.ActionLink(Model.Category.Name, MVC.Account.Category(Model.Category.Id), new { title = Model.Category.CategoryGroup.Name + " : " + Model.Category.Name })
    }
    else
    {
      @Html.ActionLink("None", MVC.Account.Transactions(categoryId: "none"))
    } @Html.ActionLink("×", MVC.Account.Transactions(urlAccountId, urlVendorId, null, urlFrom, urlTo), new { @class = "filter", title = "Remove this filter" })
    </h2>
  }
  if (Model.Vendor != null)
  {
    <h2>Vendor: 
    @if (Model.Vendor != null && Model.Vendor.Id != 0)
    {
      @Html.ActionLink(Model.Vendor.Name, MVC.Account.Vendor(Model.Vendor.Id))
    }
    else
    { 
      @Html.ActionLink("None", MVC.Account.Transactions(vendorId: "none"))
    } @Html.ActionLink("×", MVC.Account.Transactions(urlAccountId, null, urlCategoryId, urlFrom, urlTo), new { @class = "filter", title = "Remove this filter" })
    </h2>
  }
}

@{
  DateTime maxMonth = new DateTime(2013, 12, 1);
  <div style="display:inline-block;position:relative;">
  <table class="month-nav">
  @for (DateTime date = new DateTime(2008, 1, 1); date <= maxMonth; date = date.AddMonths(1))
  {
    var tdClass = (date >= Model.FromMonth && date <= Model.ToMonth) ? " class=\"selected\"" : "";
    if (date.Month == 1)
    {
      @Html.Raw("<tr>");
      <td class="year">@Html.ActionLink(date.Year.ToString(), MVC.Account.Transactions(urlAccountId, urlVendorId, urlCategoryId, date.ToUrlDate(), date.AddYears(1).AddDays(-1).ToUrlDate()))</td>
    }
    <td@{Html.Raw(tdClass);} data-from="@date.ToUrlDate()" data-to="@date.AddMonths(1).AddDays(-1).ToUrlDate()">@Html.ActionLink(date.ToString("MMM"), MVC.Account.Transactions(urlAccountId, urlVendorId, urlCategoryId, date.ToUrlDate(), date.AddMonths(1).AddDays(-1).ToUrlDate()), new { title = date.ToString("MMMM yyy") })</td>
    if (date.Month == 12)
    { 
      @Html.Raw("</tr>");
    }
  }
  </table>
  <a id="month-nav-link"></a>
  </div>
}

@if (Model.Transactions.Count() == 0)
{
  <h4>No transactions found.</h4>
}
else
{
  <table class="transactions editable">
  <thead><tr><th></th><th>Date</th>@if (Model.Account == null) {<th>Account</th>}<th>Vendor</th><th>Category</th><th>Amount</th>@if (Model.ShowBalance) {<th>Balance</th>}</tr></thead>
  @{
    var curmonth = DateTime.Now.Month;
    var firstTrx = Model.Transactions.FirstOrDefault();
    foreach (var t in Model.Transactions)
    {
      int? accountId = t.Account == null ? (int?)null : t.Account.Id;
      var vendorId = t.VendorId.HasValue ? t.VendorId.Value.ToString() : "none";
      var vendorName = t.VendorId.HasValue ? t.Vendor.Name : "";
      var firstSubtrx = t.Subtransactions.FirstOrDefault();
      var categoryId = (firstSubtrx != null && firstSubtrx.Category != null) ? firstSubtrx.CategoryId.Value.ToString() : "none";
      var categoryName = (firstSubtrx != null && firstSubtrx.Category != null) ? firstSubtrx.Category.CategoryGroup.Name + " : " + firstSubtrx.Category.Name : "";
      var categoryClass = "class=\"category" + (t.Subtransactions.Count > 1 ? " multiple" : "") + "\"";
      var categoryTitle = t.Subtransactions.Count > 1 ? " title=\"This transaction has multiple categories\"" : "";
      var trId = " id=\"trx-" + t.Id + "\"";
      var trClass = (curmonth != t.Timestamp.Month && t != firstTrx) ? "month-sep" : String.Empty;
      trClass = (t.IsReconciled) ? (String.IsNullOrEmpty(trClass) ? "rec" : trClass + " " + "rec") : trClass;
      trClass = (String.IsNullOrEmpty(trClass)) ? trClass : " class=\"" + trClass + "\"";
      curmonth = t.Timestamp.Month;
      var trData = " data-trx-id=\"" + t.Id + "\"";
      trData = trData + (accountId.HasValue ? " data-account-id=\"" + accountId.Value + "\"" : "");
      trData = trData + (!String.IsNullOrEmpty(categoryName) ? " data-category-id=\"" + categoryId + "\"" : "");
      trData = trData + (!String.IsNullOrEmpty(vendorName) ? " data-vendor-id=\"" + vendorId + "\"" : "");
      var timestampClass = "class=\"timestamp" + (t.Timestamp == t.OriginalTimestamp ? "" : " mod") + "\"";
      var timestampTitle = t.Timestamp == t.OriginalTimestamp ? "" : " title=\"Transaction budgeted for " + t.Timestamp.ToUrlDate() + "\"";
      var amtposneg = t.Amount < 0 ? " class=\"neg\"" : String.Empty;
      var balposneg = t.Balance < 0 ? " class=\"neg\"" : String.Empty;
      object checkedAttr = new { type = "checkbox", @checked = "checked" };
      object uncheckedAttr = new { type = "checkbox" };
      var attr = t.IsReconciled ? checkedAttr : uncheckedAttr;

      <tr@{Html.Raw(trId + trClass + trData);}>
      <td class="edit"><a class="edit-button">&#9998;</a><span class="edit-mode">@Ajax.InputActionLink(MVC.Account.Reconcile(t.Id, !t.IsReconciled), new AjaxOptions() { HttpMethod = "POST", OnSuccess = String.Format("reconcile({0})", t.Id) }, attr)</span></td>
      <td @Html.Raw(timestampClass + timestampTitle)>
        <span>@t.OriginalTimestamp.ToUrlDate()</span> @*don't forget about edit-mode*@
        <span class="edit-mode">@Html.TextBox("trx-datetime-" + t.Id, t.Timestamp.ToUrlDate(), new { @class = "dp", size = 8 })</span>
      </td>
      @if (Model.Account == null)
      {
      <td>@Html.ActionLink(t.Account.Name, MVC.Account.Transactions(accountId, urlVendorId, urlCategoryId, urlFrom, urlTo))</td>
      }
      <td class="vendor" title="@Html.Raw(String.Format("{0}\n{1}", firstSubtrx.Memo, firstSubtrx.Notes))">
        <span>@if (!String.IsNullOrEmpty(vendorName)) { @Html.ActionLink(vendorName, MVC.Account.Transactions(urlAccountId, vendorId, urlCategoryId, urlFrom, urlTo)); }</span>
        <span class="edit-mode"><select data-placeholder="Choose a Vendor"></select></span>
      </td>
      <td @Html.Raw(categoryClass + categoryTitle)> @*data-trx-id="@t.Id" *@
        <span>@if (!String.IsNullOrEmpty(categoryName)) { @Html.ActionLink(categoryName, MVC.Account.Transactions(urlAccountId, urlVendorId, categoryId, urlFrom, urlTo)); }</span>
        <span class="edit-mode"><select data-placeholder="Choose a Category"></select></span>
      </td>
      <td@{Html.Raw(amtposneg);}>@t.Amount.ToCurrency()</td>
      @if (Model.ShowBalance)
      {
      <td@{Html.Raw(balposneg);}>@t.Balance.ToCurrency()</td>
      }
      </tr><text>
</text>
    } 
  }
  </table>
}