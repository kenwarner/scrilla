@model scrilla.Web.Controllers.ViewModels.CategoriesViewModel

@{
  int? accountId = Model.Account == null ? (int?)null : Model.Account.Id;
  string urlFrom = Model.UrlFrom.HasValue ? Model.UrlFrom.Value.ToUrlDate() : null;
  string urlTo = Model.UrlTo.HasValue ? Model.UrlTo.Value.ToUrlDate() : null;
  bool isSingleMonth = (Model.FromMonth == Model.ToMonth);

  if (Model.FromMonth == Model.ToMonth)
  {
    ViewBag.Title = "Categories for " + Model.From.ToString("MMMM yyyy");
  }
  else if (Model.FromMonth.Month == 1 && Model.ToMonth.Month == 12 && Model.ToMonth.Year == Model.FromMonth.Year)
  {
    ViewBag.Title = "Categories for " + Model.From.ToString("yyyy");
  }
  else
  {
    ViewBag.Title = "Categories from " + Model.From.ToString("MMMM yyyy") + " to " + Model.To.ToString("MMMM yyyy");
  }
}

<script>
  @Html.Raw("var monthNavUrl = 'Categories';")
</script>

<h2>@ViewBag.Title <a title="Add New Category">+</a></h2>
<p>@Html.DropDownList("accountId", Model.AvailableAccounts.Select(x => new SelectListItem() { Value = x.Id.ToString(), Text = (x.AccountGroup == null ? "" : (x.AccountGroup.Name + " : ")) + x.Name, Selected = (x.Id == accountId) }), new { id = "category-account", @class = "chzn-select" })</p>

@{ Html.RenderAction(MVC.Account.AddCategory()); }

@{
  DateTime maxMonth = new DateTime(2012, 12, 1);
  <div style="display:inline-block;position:relative;">
  <table class="month-nav">
  @for (DateTime date = new DateTime(2008, 1, 1); date <= maxMonth; date = date.AddMonths(1))
  {
    var tdClass = (date >= Model.FromMonth && date <= Model.ToMonth) ? " class=\"selected\"" : "";
    if (date.Month == 1)
    {
      @Html.Raw("<tr>");
      <td class="year">@Html.ActionLink(date.Year.ToString(), MVC.Account.Categories(accountId, date.ToUrlDate(), date.AddYears(1).AddDays(-1).ToUrlDate()))</td>
    }
    <td@Html.Raw(tdClass) data-from="@date.ToUrlDate()" data-to="@date.AddMonths(1).AddDays(-1).ToUrlDate()">@Html.ActionLink(date.ToString("MMM"), MVC.Account.Categories(accountId, date.ToUrlDate(), date.AddMonths(1).AddDays(-1).ToUrlDate()), new { title = date.ToString("MMMM yyy") })</td>
    if (date.Month == 12)
    { 
      @Html.Raw("</tr>");
    }
  }
  </table>
  <a id="month-nav-link"></a>
  </div>
}

<div style="margin-bottom:-15px;"><a href="javascript:///" onclick="$('tr.nodata, tr.category-total').toggle();" style="font-size:.8em;">Show All</a></div>
<table id="categories">
@{
  Dictionary<DateTime, decimal> monthlyTotals = new Dictionary<DateTime, decimal>();
  decimal totalInitialBalance = 0M;

  <thead><tr class="months"><th>Category</th>
  @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
  {
    <th title="@cur.ToString("MMMM yyyy")">@Html.ActionLink(cur.ToString("MMMM"), MVC.Account.Categories(accountId, cur.ToUrlDate(), cur.AddMonths(1).AddDays(-1).ToUrlDate()))</th>
  }
  @if(!isSingleMonth){<th>Total</th>}</tr></thead>
  
  var categoryGroups = Model.CategoryTotals
    .GroupBy(x => x.Category.CategoryGroupId, (a, b) => new { CategoryTotals = b })
    .OrderBy(x => x.CategoryTotals.FirstOrDefault().Category.CategoryGroup.DisplayOrder);

  foreach (var categoryGroup in categoryGroups)
  {
    foreach (var ct in categoryGroup.CategoryTotals.OrderBy(x => x.Category.Name))
    {
      var months = ct.Totals.Keys;
      var hasData = months.Any(x => ct.Totals[x] - ct.NonBudgetTotals[x] != 0M);
      string trClass = hasData ? "" : " class=\"nodata\"";
      string urlCategoryId = ct.Category == null ? null : (ct.Category.Id == 0 ? "none" : ct.Category.Id.ToString());
      <tr@Html.Raw(trClass)>
      <td>
      @if (ct.Category.Id == 0)
      {
        @Html.ActionLink("None", MVC.Account.Transactions(null, null, "none"));
      }
      else
      {
        @Html.ActionLink(ct.Category.CategoryGroup.Name + " : " + ct.Category.Name, MVC.Account.Category((ct.Category.Id)));
      }
      </td>

      @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
      {
        var amount = ct.Totals[cur];
        var nonBudgetAmount = ct.NonBudgetTotals[cur];
        var budgetAmount = amount - nonBudgetAmount;
        var tdClass = " class=\"" + (budgetAmount == 0M ? "zero" : (budgetAmount > 0M ? "pos" : "neg")) + (nonBudgetAmount == 0M ? "" : " nonbudget") + "\"";
        var tdTitle = nonBudgetAmount != 0M ? "title=\"Non-budgeted amount: " + nonBudgetAmount.ToCurrency() + "\nBudgeted amount: " + budgetAmount.ToCurrency() + "\"" : "";
        <td@Html.Raw(tdClass)@Html.Raw(tdTitle)>@Html.ActionLink(budgetAmount.ToCurrency(), MVC.Account.Transactions(null, null, urlCategoryId, cur.ToUrlDate(), cur.AddMonths(1).AddDays(-1).ToUrlDate()))</td>
      }
      @if(!isSingleMonth){<td class="total">@((ct.Totals.Sum(x => x.Value) - ct.NonBudgetTotals.Sum(x => x.Value)).ToCurrency())</td>}
      </tr>
    }

    // category totals
    <tr class="category-total total"><td>@categoryGroup.CategoryTotals.FirstOrDefault().Category.CategoryGroup.Name</td>
    @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
    {
      var total = categoryGroup.CategoryTotals.Sum(x => x.Totals[cur] - x.NonBudgetTotals[cur]);
      <td>@total.ToCurrency()</td>
    }
    @if(!isSingleMonth){<td>@categoryGroup.CategoryTotals.Sum(x => x.Totals.Sum(y => y.Value) - x.NonBudgetTotals.Sum(y => y.Value)).ToCurrency()</td>}
    </tr>
  }

  var firstCategoryGroup = true;
  foreach (var categoryGroup in categoryGroups)
  {
    var trClass = " class=\"total" + (firstCategoryGroup ? " month-sep" : "") + "\"";
    firstCategoryGroup = false;
    <tr@Html.Raw(trClass)><td>@categoryGroup.CategoryTotals.FirstOrDefault().Category.CategoryGroup.Name</td>
    @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
    {
      var monthTotal = categoryGroup.CategoryTotals.Sum(x => x.Totals[cur] - x.NonBudgetTotals[cur]);
      <td>@monthTotal.ToCurrency()</td>
    }
    @if(!isSingleMonth){<td>@categoryGroup.CategoryTotals.Sum(x => x.Totals.Sum(y => y.Value) - x.NonBudgetTotals.Sum(y => y.Value)).ToCurrency()</td>}
    </tr>
  }

  // grand totals  
  var trClass2 = " class=\"total" + (!accountId.HasValue ? " month-sep" : "") + "\"";
  <tr@Html.Raw(trClass2)><td>Total:</td>
  @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
  {
    <td>@Model.CategoryTotals.Sum(x => x.Totals[cur] - x.NonBudgetTotals[cur]).ToCurrency()</td>
  }
  @if(!isSingleMonth){<td>@Model.CategoryTotals.Sum(x => x.Totals.Sum(y => y.Value) - x.NonBudgetTotals.Sum(y => y.Value)).ToCurrency()</td>}
  </tr>

  if (accountId.HasValue)
  {
    var trClass = " class=\"total month-sep\"";
    <tr@Html.Raw(trClass)>
    <td>Initial Balance:</td>
    @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
    {
      var initial = Model.MonthlyInitialBalances.ContainsKey(cur) ? Model.MonthlyInitialBalances[cur] : 0M;
      totalInitialBalance = initial; // set the total to the last one displayed (furthest to the right on the screen)
      <td>@initial.ToCurrency()</td>
    }
    @if(!isSingleMonth){<td>@totalInitialBalance.ToCurrency()</td>}
    </tr>

    <tr class="total">
    <td>Final Balance:</td>
    @for (DateTime cur = Model.ToMonth; cur >= Model.FromMonth; cur = cur.AddMonths(-1))
    {
      var income = Model.MonthlyIncome.ContainsKey(cur) ? Model.MonthlyIncome[cur] : 0M;
      var expenses = Model.MonthlyExpenses.ContainsKey(cur) ? Model.MonthlyExpenses[cur] : 0M;
      var initial = Model.MonthlyInitialBalances.ContainsKey(cur) ? Model.MonthlyInitialBalances[cur] : 0M;

      var expected = (initial + income + expenses);
      var final = Model.MonthlyFinalBalances.ContainsKey(cur) ? Model.MonthlyFinalBalances[cur] : 0M;
      var diff = expected - final;
      var diffTitle = (diff == 0) ? String.Empty : " title=\"Expected: " + expected.ToCurrency() + " Diff: " + diff.ToCurrency() + "\"";
      var diffClass = (diff > 0) ? " class=\"pos\"" : ((diff < 0) ? " class=\"neg\"" : String.Empty);
      <td@Html.Raw(diffClass)@Html.Raw(diffTitle)>@final.ToCurrency()</td>
    }
    @if(!isSingleMonth){<td>@((totalInitialBalance + Model.CategoryTotals.Sum(x => x.Totals.Sum(y => y.Value) - x.NonBudgetTotals.Sum(y => y.Value))).ToCurrency())</td>}
    </tr>  
  }
}
</table>